---
- name: setup project stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks: 
    - name: Import VPC Variables
      include_vars: vars/vpc_setup

    - name: Import VPC Variables
      include_vars: vars/output_vars

    - name: Import project setup Variables
      include_vars: vars/project_stack

    - name: create a new ec2 key pair
      ec2_key:
        name: project
        region: "{{region}}"
      register: projectkey_out
      
    - debug:
        var: projectkey_out

    - name: store login key
      copy:
        content: "{{projectkey_out.key.private_key}}"
        dest: ./projectkey.pem
        mode: 0600
      when: projectkey_out.changed         

    - name: create SG for LB
      ec2_group:
        name: ELB-sg
        description: allow port 80 from any where
        region: "{{region}}"
        vpc_id: "{{vpcid}}"      
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: ELBSG_out

    - name: create SG for project stack
      ec2_group:
        name: project-sg
        description: allow port 22 from any where
        region: "{{region}}"
        vpc_id: "{{vpcid}}"      
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ELBSG_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{BastionSGid}}"  
      register: projectSG_out      
      
    - name: update SG for project stack
      ec2_group:
        name: project-sg
        description: allow port 22 from any where
        region: "{{region}}"
        vpc_id: "{{vpcid}}"      
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{projectSG_out.group_id}}"

    - name: create nginx web01
      ec2:
        key_name: project
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_time: 300
        instance_tags:
          Name: "web01"
        exact_count: 1
        count_tag:
          Name: "web01"
        group_id: "{{projectSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: web01_out            

    - name: create tomcat app01
      ec2:
        key_name: project
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_time: 300
        instance_tags:
          Name: "app01"
        exact_count: 1
        count_tag:
          Name: "app01"
        group_id: "{{projectSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: app01_out

    - name: create memcache mc01
      ec2:
        key_name: project
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_time: 300
        instance_tags:
          Name: "mc01"
        exact_count: 1
        count_tag:
          Name: "mc01"
        group_id: "{{projectSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: mc01_out         

    - name: create RabbitMQ rmq01
      ec2:
        key_name: project
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_time: 300
        instance_tags:
          Name: "rmq01"
        exact_count: 1
        count_tag:
          Name: "rmq01"
        group_id: "{{projectSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: rmq01_out         

    - name: create Mysql db01
      ec2:
        key_name: project
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_time: 300
        instance_tags:
          Name: "db01"
        exact_count: 1
        count_tag:
          Name: "db01"
        group_id: "{{projectSG_out.group_id}}"
        vpc_subnet_id: "{{privsub1id}}"
      register: db01_out  
    - debug:
        var: db01_out.tagged_instances[0].id 

    - local_action:
        module: ec2_elb_lb
        name: "test-vpc"
        state: "{{state}}"
        instance_ids:
          - "{{ web01_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ ELBSG_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80     

    - name: insert/update hosts IP 
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          web01_ip: {{ web01_out.tagged_instances[0].private_ip }}
          app01_ip: {{ app01_out.tagged_instances[0].private_ip }}
          rmq01_ip: {{ rmq01_out.tagged_instances[0].private_ip }}
          mc01_ip: {{ mc01_out.tagged_instances[0].private_ip }}
          db01_ip: {{ db01_out.tagged_instances[0].private_ip }}        

    - name: copy login key to provision-stack
      copy:
        src: projectkey.pem
        dest: provision-stack/projectkey.pem
        mode: '0400'

    - name: insert/update inventory file
      blockinfile:
        path: provision-stack/inventory-project
        block: |
          web01 ansible_host={{ web01_out.tagged_instances[0].private_ip }}
          app01 ansible_host={{ app01_out.tagged_instances[0].private_ip }}
          rmq01 ansible_host={{ rmq01_out.tagged_instances[0].private_ip }}
          mc01 ansible_host={{ mc01_out.tagged_instances[0].private_ip }}
          db01 ansible_host={{ db01_out.tagged_instances[0].private_ip }}
          cntl ansible_host=127.0.0.1 ansible_connection=local  

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl          

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=projectkey.pem
          
